-- Lots of fun-ctions!

local GUIDS = {
  ['protection_card']     = '103219',
  ['protection6_card']    = '271f4d',
  ['turn_order_card']     = '969667',
  ['sandstorm_card']      = '3e9df9',
  ['landsraad_card']      = 'd9492f',
  ['common_dice_supply']  = 'b1f1e2',
  ['unused_components']   = '09c8d0',
  ['sandstorm_token']     = 'ef4503',
  ['sandstorm_effect']    = 'ca7876',
  ['menu']                = 'd5e79c',
  ['round_marker']        = 'c1b8e3'
}

local READY_BUTTON_GUIDS = {
  ['Red']    = '64453f',
  ['Blue']   = '43c2eb',
  ['Brown']  = '1ab6f0',
  ['Yellow'] = 'ce11b8',
  ['Purple'] = 'c830ae',
  ['White']  = 'b95c12'
}

local FACTION_TO_COLOR = {
  ['Atreides']      = 'Red',
  ['Harkonnen']     = 'Blue',
  ['Fremen']        = 'Brown',
  ['Corrino']       = 'Yellow',
  ['Spacing Guild'] = 'Purple',
  ['Bene Gesserit'] = 'White'
}

local COLOR_TO_FACTION = {
  ['Red']    = 'Atreides',
  ['Blue']   = 'Harkonnen',
  ['Brown']  = 'Fremen',
  ['Yellow'] = 'Corrino',
  ['Purple'] = 'Spacing Guild',
  ['White']  = 'Bene Gesserit'
}

-- do nothing function
function pass() return end

-- https://stackoverflow.com/a/2705804
function tableLength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function getObjectPlayerColor(obj)
  for _, tag in ipairs(obj.getTags()) do
    for _, player_color in ipairs(getSeatedPlayers()) do
      if tag == player_color then
        return player_color
      end
    end
  end
  return nil
end

function broadcastToAllAction(player_color, action)
  broadcastToAll(player_color .. ' [' .. COLOR_TO_FACTION[player_color] .. '] ' .. action, stringColorToRGB(player_color))
end
local function dealDice()
  local seated_players = getSeatedPlayers() --table
  local unused_components = getObjectFromGUID(GUIDS.unused_components)
  local common_dice_supply = getObjectFromGUID(GUIDS.common_dice_supply)
  for _, player_color in ipairs(seated_players) do
    local player = Player[player_color] --Player
    -- Get table of position of player's hand
    local player_hand = player.getHandTransform() --table
    -- Get dice positions relative to hand
    local dice_pos_offset = player_hand.position + 6*player_hand.forward --Vector
    local dice_pos_0 = dice_pos_offset + -1*player_hand.right --Vector
    local dice_pos_1 = dice_pos_offset + 0*player_hand.right --Vector
    local dice_pos_2 = dice_pos_offset + 1*player_hand.right --Vector
    -- Deal dice to table near hands
    unused_components.takeObject({position=dice_pos_0}) --object
    unused_components.takeObject({position=dice_pos_1}) --object
    unused_components.takeObject({position=dice_pos_2}) --object
    -- Deal 3 dice per player to common supply
    for i = 1, 3 do
      common_dice_supply.putObject(unused_components.takeObject()) --object
    end
  end
  printToAll((#seated_players * 3) .. " dice in common supply.", stringColorToRGB('Orange'))
end

function putInFrontOfPlayer(object, player_color, forward_offset)
  local forward_offset = forward_offset or 17
  local player_hand = Player[player_color].getHandTransform()
  local pos = player_hand.position + forward_offset*player_hand.forward
  object.setPositionSmooth(pos)
end

function dealStartingCards()
  local unused_components = getObjectFromGUID(GUIDS.unused_components)
  local seated_players = getSeatedPlayers() --table
  local protection_card = getObjectFromGUID(GUIDS.protection_card)
  local protection6_card = getObjectFromGUID(GUIDS.protection6_card)
  local sandstorm_card = getObjectFromGUID(GUIDS.sandstorm_card)
  local landsraad_card = getObjectFromGUID(GUIDS.landsraad_card)
  local turn_order_card = getObjectFromGUID(GUIDS.turn_order_card)
  -- Whether to use extra protection card
  if #seated_players >= 5 then
    putInFrontOfPlayer(protection6_card, 'Brown')
  else
    unused_components.putObject(protection6_card)
  end
  for _, player_color in ipairs(seated_players) do
    if player_color == 'Brown' then
      -- Fremen start with the protection card
      putInFrontOfPlayer(protection_card, 'Brown')
    elseif player_color == 'Yellow' then
      -- Corrino starts with the Landsraad Card
      putInFrontOfPlayer(landsraad_card, 'Yellow')
    elseif player_color == 'Purple' then
      -- Spacing Guild starts with the sandstorm Card
      putInFrontOfPlayer(sandstorm_card, 'Purple')
    elseif player_color == 'White' then
      -- Bene Gesserit starts with the turn order Card
      putInFrontOfPlayer(turn_order_card, 'White')
    end
  end
end

function setTurnOrder()
  local faction_turn_order_tokens = getObjectsWithTag('Faction Turn Order Token')
  local seated_players = getSeatedPlayers()
  local xpos = {}
  for _, token in ipairs(faction_turn_order_tokens) do
    --for _, player_color in pairs(seated_players) do
    --  if token.hasTag(player_color) then
    --    xpos[player_color] = token.getPosition().x
    --  end
    --end
    local player_color = getObjectPlayerColor(token)
    if player_color then
      xpos[player_color] = token.getPosition().x
    end
  end
  Turns.order = table.sort(seated_players, function(a,b) return xpos[a] < xpos[b] end)
end

function cleanupUnusedFactions()
  local unused_components = getObjectFromGUID(GUIDS.unused_components)
  for _, player_color in pairs(Player.getAvailableColors()) do
    if not Player[player_color].seated then
      local unused_objects = getObjectsWithTag(player_color)
      for _, object in ipairs(unused_objects) do
        unused_components.putObject(object) --object
      end
    end
  end
end

function hasSeatedPlayerTag(object)
  local seated_players = getSeatedPlayers() --table
  for _, player_color in ipairs(seated_players) do
    if object.hasTag(player_color) then
      return true
    end
  end
  return false
end

function prepareLoyaltyTokens()
  local loyalty_tokens = getObjectsWithTag('Loyalty Token')
  local available_tokens = {}
  for _, token in ipairs(loyalty_tokens) do
    if hasSeatedPlayerTag(token) then
      table.insert(available_tokens, token)
    end
  end
  local loyalty_deck = group(available_tokens)[1]
  -- TODO: Will cause an error if only Atreides is in-game...so make sure you have 3 ppl
  -- Maybe check that 3 players seated?
  loyalty_deck.flip()
  loyalty_deck.shuffle()
end

local fog_is_down = true
function toggleFog()
  local allObjects = getAllObjects()
  for _, o in ipairs(allObjects) do
    if o.name == "FogOfWarTrigger" then
      local fog = getObjectFromGUID(o.guid)
      local pos = fog.getPosition()
      local new_y
      if fog_is_down then
        new_y = 2.50
      else
        new_y = -3
      end
      fog.setPositionSmooth({ pos.x, new_y, pos.z })
    end
  end
  fog_is_down = not fog_is_down
end

function getFirstPlayer()
  return Turns.order[1]
end

function getLastPlayer()
  return Turns.order[#Turns.order]
end

function isFirstPLayer(player_color)
  return player_color == getFirstPlayer()
end

function isLastPlayer(player_color)
  return player_color == getLastPlayer()
end

function waitForPlayerTurnEnd(player_color)
  local player_color = player_color or Turns.turn_color
  Wait(function() return not(player_color == Turns.turn_color) end,  pass)
end

function getReadyButtons()
  local seated_colors = getSeatedPlayers()
  local ready_buttons = {}
  for _, player_color in ipairs(seated_colors) do
    ready_buttons[player_color] = getObjectFromGUID(READY_BUTTON_GUIDS[player_color])
  end
  return ready_buttons
end

-- Reset ready buttons
function resetReadyButtons()
  for player_color, button in pairs(getReadyButtons()) do
    button.call('unlockLockout')
  end
end

function areAllPlayersReady()
  local ready_buttons = getReadyButtons()
  local result = true
  for player_color, button in pairs(ready_buttons) do
    result = result and button.call('getLockout')
  end
  return result
end

function getClosestFactionMat(position)
  local dist = {}
  for _, mat in ipairs(getObjectsWithTag('Faction Mat')) do
    local mat_position = mat.getPosition()
    local player_color = getObjectPlayerColor(mat)
    if player_color and position and mat_position then
      dist[player_color] = position:distance(mat_position)
    end
  end
  local seated_players = getSeatedPlayers()
  local sorted = table.sort(seated_players, function(a,b) return dist[a] < dist[b] end)
  return sorted[1]
end
