-- Before including this, need to set player color
-- Otherwise default to grey
local player_color = player_color or 'Grey'
--Runs when the scripted button inside the button is clicked
function buttonPress()
    if lockout == false and Player[player_color].seated then
        --Call on any other function here. For example:
        --Global.call("Function Name", {table of parameters if needed})
        --You could also add your own scrting here. For example:
        --print("The button was pressed. Hoozah.")
        self.AssetBundle.playTriggerEffect(0) --triggers animation/sound
        lockout = true --locks out the button
        self.setColorTint(stringColorToRGB('Black'))
        broadcastToAll(player_color .. ' is ready', stringColorToRGB(player_color))
        if Global.call('areAllPlayersReady') then
          Global.call('resetReadyButtons')
          Global.call('nextStateCallback')
        end
        --startLockoutTimer() --Starts up a timer to remove lockout
    end
end

--Runs on load, creates button and makes sure the lockout is off
function onload()
    self.createButton({
        label="Big Red Button\n\nBy: MrStump", click_function = "buttonPress",
        function_owner = self,  position={0,0.25,0}, height=1400, width=1400
    })
    lockout = false
    self.setColorTint(stringColorToRGB(player_color))
end

--Starts a timer that, when it ends, will unlock the button
function startLockoutTimer()
    Timer.create({identifier=self.getGUID(), function_name='unlockLockout', delay=0.5})
end

--Unlocks button
function unlockLockout()
    lockout = false
    self.setColorTint(stringColorToRGB(player_color))
end

function getLockout()
  return lockout
end

--Ends the timer if the object is destroyed before the timer ends, to prevent an error
function onDestroy()
    Timer.destroy(self.getGUID())
end
