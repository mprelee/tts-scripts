--paintings.ttslua
--[[
Various functions useful for manipulating paintings (cards) in Modern Art. If I
was better at writing OOP lua code, this would probably be functions defined in
the "painting" class and various instance methods
Original author:  Madeline Prelee, 2021-04-16
--]]

--[[
Retrieves all paintings that are faceup and not in someone's hand. In terms
of game state, these are all paintings that contribute to end-of-round artist
valuation.
--]]
function getFaceupPaintings()
  local paintings = {}
  for _, obj in ipairs(getObjects()) do
    if (obj.hasTag('painting'))
        and (not obj.is_face_down)
        and (tryGetHoldingPlayer(obj) == nil) then
      table.insert(paintings, obj)
    end
  end
  return paintings
end

--[[
Used to determine end-of-round state and to tally the top 3 artists
Returns a table of artists and the number of their faceup paintings
--]]
function countFaceupPaintings()
  local counts = {
    ['hick']     = 0,
    ['ivory']    = 0,
    ['okamoto']  = 0,
    ['mondrian'] = 0,
    ['kaminski'] = 0, }
  for _, painting in ipairs(getFaceupPaintings()) do
    local artist = getArtist(painting)
    counts[artist] = counts[artist] + 1
  end
  return counts
end

--[[
Self explanatory...collect discards for new round
--]]
function collectDiscards()
  local paintings = getObjectsWithTag('painting')
  local position = getObjectFromGUID(guids.discardZone).getPosition()
  for _, painting in ipairs(getFaceupPaintings()) do
      painting.setRotationSmooth(Vector(0,0,0))
      painting.setPositionSmooth(position)
  end
end

function tryGetHoldingPlayer(obj)
  for _, zone in ipairs(obj.getZones()) do
    local guid = zone.guid
    local player_color = findKey(guids.handZones, guid)
    if player_color ~= nil then return player_color end
  end
  return nil
end
