common = require('common')
guids = require('modern-art/guids')
tags = require('modern-art/tags')

DEBUG=true
NUM_DEALS = {
  [1] = { [1] = 10, [2] = 6, [3] = 6, [4] = 0 }, -- for debug
  [2] = { [1] = 10, [2] = 6, [3] = 6, [4] = 0 }, -- for debug
  [3] = { [1] = 10, [2] = 6, [3] = 6, [4] = 0 },
  [4] = { [1] =  9, [2] = 4, [3] = 4, [4] = 0 },
  [5] = { [1] =  8, [2] = 3, [3] = 3, [4] = 0 }
}
discardPilePosition = {21.96, 2.11, -35.95}

---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---- Bidding and cash manipulation
---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function sumCashInZone(zone_guid)
  local zone = getObjectFromGUID(zone_guid)
  local total = 0
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('moneytoken') then
      total = total + math.abs(obj.getQuantity())*getMoneyValue(obj)
    end
  end
  return total
end

function getPlayerBid(player_color)
  return sumCashInZone(guids.biddingZones[player_color])
end

function printBid(player_color)
  local msg = player_color .. ' bid $' .. getPlayerBid(player_color) .. 'k'
  broadcastToAll(msg, stringColorToRGB(player_color))
end

function printAllBids()
  for _, player_color in ipairs(getSeatedPlayers()) do
    printBid(player_color)
  end
end
---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---- Card manipulation
---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function collectDiscards()
  local paintings = getObjectsWithTag('painting')
  for _, painting in ipairs(paintings) do
    --if (not painting.is_face_down) and (painting.getPosition()[2] < 2 ) then

    if (not painting.is_face_down) and (tryGetHoldingPlayer(painting) == nil) then
      painting.setRotationSmooth(Vector(0,0,0))
      painting.setPositionSmooth(discardPilePosition)
    end
  end
end

---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---- Round and gameboard manipulation
---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function getValueTileValue(obj)
  if obj.hasTag('valuetile') then
    if obj.hasTag('value10') then
      return 10
    elseif obj.hasTag('value20') then
      return 20
    elseif obj.hasTag('value30') then
      return 30
    else
      return 0
    end
  else
    return 0
  end
end

function getArtistValueState(round)
  local state = {
      ['hick']     = {0,0,0,0},
      ['ivory']    = {0,0,0,0},
      ['okamato']  = {0,0,0,0},
      ['mondrian'] = {0,0,0,0},
      ['kaminski'] = {0,0,0,0}, }
  for round = 1, 4 do
    for artist, guid in pairs(guids.valueZones[round]) do
      local zone = getObjectFromGUID(guid)
      for _, obj in ipairs(zone.getObjects()) do
        state[artist][round] = getValueTileValue(obj)
      end
    end
  end
  return state
end

function getCurrentRoundArtistValue(currentRound, artist)
  local state = getArtistValueState()
  local val = 0
  if state[artist][currentRound] > 0 then
    for i = 1, currentRound do
      val = val + state[artist][i]
    end
  end
  return val
end

function getCurrentRound()
  local state = getArtistValueState()
  -- Apologies to my CS profs....this isnt the most efficient but it wont slow
  --   down performance or anything.
  local maxRound = 0
  for artist, values in pairs(state) do
    for index, value in ipairs(values) do
      -- If this artist has a value token, update maxRound
      if value > 0 then
        maxRound = math.max(maxRound, index)
      end
    end
  end
  return maxRound + 1
end

function dealNextRound()
  local numPlayers = #getSeatedPlayers()
  local currentRound = getCurrentRound()
  local deckCount = math.abs(getObjectFromGUID(guids.deck).getQuantity())
  local dealsPerPlayer = NUM_DEALS[numPlayers]
  local round1Count = 70 - numPlayers*dealsPerPlayer[1]
  local round2Count = round1Count - numPlayers*dealsPerPlayer[2]
  local round3Count = round2Count - numPlayers*dealsPerPlayer[3]
  if (deckCount == 70 and currentRound == 1)
      or (deckCount >= round1Count and currentRound == 2)
      or (deckCount >= round2Count and currentRound == 3)
      or (deckCount >= round3Count and currentRound == 4) then
    local deck = getObjectFromGUID(guids.deck)
    deck.deal(NUM_DEALS[numPlayers][currentRound])
  end
end

-- pass button, hick auction type error (once around), ready button, sort bag

---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---- Events
---- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function onObjectRandomize(object, playerColor)
  if object.hasTag('Deck') then
    deck.shuffle()
    return
  elseif not object.hasTag('moneytoken') then
    return
  end
  local position = object.getPosition()
  local rotation = object.getRotation()
  local value = getMoneyValue(object)
  local takeBank = nil
  local putBank = nil
  if object.hasTag('moneytoken') and object.getQuantity() == -1 then
    local numTake = 0
    if value == 1 then
      return
    elseif value == 5 then
      putBank = getObjectFromGUID(guids.bank5)
      takeBank = getObjectFromGUID(guids.bank1)
      numTake = 5
    elseif value == 10 then
      putBank = getObjectFromGUID(guids.bank10)
      takeBank = getObjectFromGUID(guids.bank5)
      numTake = 2
    elseif value == 20 then
      putBank = getObjectFromGUID(guids.bank20)
      takeBank = getObjectFromGUID(guids.bank10)
      numTake = 2
    elseif value == 50 then
      putBank = getObjectFromGUID(guids.bank50)
      takeBank = getObjectFromGUID(guids.bank10)
      numTake = 5
    elseif value == 100 then
      putBank = getObjectFromGUID(guids.bank100)
      takeBank = getObjectFromGUID(guids.bank50)
      numTake = 2
    end
    putBank.putObject(object)
    for i = 1, numTake do
      takeBank.takeObject({position=position,rotation=rotation})
    end
  -- stack of objects
  elseif object.getQuantity() > 0 and object.hasTag('moneytoken') then
    local takeValue = 0
    if value == 1 then
      putBank = getObjectFromGUID(guids.bank1)
      takeBank = getObjectFromGUID(guids.bank5)
      takeValue = 5
    elseif value == 5 then
      putBank = getObjectFromGUID(guids.bank5)
      takeBank = getObjectFromGUID(guids.bank10)
      takeValue = 10
    elseif value == 10 then
      putBank = getObjectFromGUID(guids.bank10)
      takeBank = getObjectFromGUID(guids.bank20)
      takeValue = 20
    elseif value == 20 then
      putBank = getObjectFromGUID(guids.bank20)
      takeBank = getObjectFromGUID(guids.bank100)
      takeValue = 100
    elseif value == 50 then
      putBank = getObjectFromGUID(guids.bank50)
      takeBank = getObjectFromGUID(guids.bank100)
      takeValue = 100
    elseif value == 100 then
      return
    end
    while object.getQuantity()*value >= takeValue do
      takeBank.takeObject({position=position,rotation=rotation})
      for i = 1, takeValue/value do
        putBank.putObject(object.takeObject())
      end
    end
  end
end

function onObjectLeaveContainer(container, leave_object)
  if leave_object.hasTag('Painting') then
    function announceAuction(player_color)
      local gavel = getObjectFromGUID(guids.gavel)
      local layoutPos = getObjectFromGUID(guids.layoutZones[player_color]).getPosition()
      gavel.setPositionSmooth(layoutPos)
      broadcastToAll(player_color..' is holding '..getAuctionType(leave_object)
      .. ' for a painting by '..getArtist(leave_object), stringColorToRGB(player_color))
      local easel = getObjectFromGUID(guids.easels[player_color])
      local snapPoint = easel.getSnapPoints()[1]
      local position = easel.getPosition() + snapPoint.position + Vector(0,6,0)
      local rotation = easel.getRotation()  + Vector(90,0,90)
      leave_object.setPosition(position+Vector(0,40,0))
      leave_object.setRotationSmooth(rotation)
      leave_object.setPositionSmooth(position)
    end
    leave_object.addContextMenuItem("Auction", announceAuction)
    --leave_object.addContextMenuItem("Debug", function() for k, v in ipairs(leave_object.getZones()) do print(v.hasTag('HandTrigger')) end end)
  end
end

function tryGetHoldingPlayer(obj)
  for _, zone in ipairs(obj.getZones()) do
    local guid = zone.guid
    local player_color = findKey(guids.handZones, guid)
    if player_color ~= nil then return player_color end
  end
  return nil
end


function onLoad()
  --for _, obj in ipairs(getAllObjects()) do
  --  if obj.hasTag('Painting') then
  --    function announceAuction(player_color)
  --      local gavel = getObjectFromGUID(guids.gavel)
  --      local layoutPos = getObjectFromGUID(guids.layoutZones[player_color]).getPosition()
  --      gavel.setPositionSmooth(layoutPos)
  --      broadcastToAll(player_color..' is holding '..getAuctionType(obj)
  --      .. ' for a painting by '..getArtist(leave_object), stringColorToRGB(player_color))
  --      local easel = getObjectFromGUID(guids.easels[player_color])
  --      local snapPoint = easel.getSnapPoints()[1]
  --      local position = easel.getPosition() + snapPoint.position + Vector(0,6,0)
  --      local rotation = easel.getRotation()  + Vector(90,0,90)
  --      obj.setPosition(position+Vector(0,40,0))
  --      obj.setRotationSmooth(rotation)
  --      obj.setPositionSmooth(position)
  --    end
  --    obj.addContextMenuItem("Auction", announceAuction)
  --  end
  --end
  local gameboard = getObjectFromGUID(guids.gameboard)
  gameboard.createButton({
        click_function = 'dealNextRound',
        label          = 'Deal',
        position       = Vector(-2.25,0,0.8),
        width          = 400,
        height         = 80,
        font_size      = 100,
        tooltip        = 'Deal next round if ready.',
      })
  gameboard.createButton({
        click_function = 'collectDiscards',
        label          = 'Cleanup',
        position       = Vector(-3.12,0,0.8),
        width          = 400,
        height         = 80,
        font_size      = 100,
        tooltip        = 'Place sold paintings in discard',
        })
  gameboard.createButton({
        click_function = 'printAllBids',
        label          = 'Print ALL Bids',
        position       = Vector(0, 0, 1.2),
        width          = 800,
        height         = 80,
        font_size      = 100,
        tooltip        = 'Display everyone\'s current bid in chat'
  })

  for player_color, zone in pairs(guids.hiddenZones) do
    local buttonCallbackName = 'print'..player_color..'Bid'
    -- Store in global namespace
	  _G[buttonCallbackName] = function(obj, color, alt) printBid(player_color) end
    local z = getObjectFromGUID(zone)
    z.createButton({
          click_function = buttonCallbackName,
          label          = 'Print ' .. player_color .. ' Bid',
          position       = Vector(0, -0.07, 0.64),
          rotation       = Vector(0, 180, 0),
          width          = 500,
          height         = 20,
          font_size      = 50,
          color          = player_color,
          tooltip        = 'Print ' .. player_color .. '\'s current bid in chat'
    })
  end
end
