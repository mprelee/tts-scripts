constants = require('modern-art/constants')
tags = require('modern-art/tags')

function sumCashInZone(zone_guid, ythresh)
  local ythresh = ythresh or -9999
  local zone = getObjectFromGUID(zone_guid)
  local total = 0
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('moneytoken') and obj.getPosition()[2] > ythresh then
      total = total + math.abs(obj.getQuantity())*getMoneyValue(obj)
    end
  end
  return total
end

function getPlayerBid(player_color)
    local zone_guid = guids.hiddenZones[player_color]
    return sumCashInZone(zone_guid,0.7)
end

function collectDiscards()
  local paintings = getObjectsWithTag('painting')
  local discardPos = getObjectFromGUID(guids.discardZone).getPosition()
  for _, painting in ipairs(paintings) do
    if (not painting.is_face_down) and (painting.getPosition()[2] < 2 ) then
      painting.setRotationSmooth(Vector(0,0,0))
      painting.setPositionSmooth(discardPos)
    end
  end
end

-- Use deck size to get current round
function getCurrentRound()
  local numPlayers = #getSeatedPlayers()
  local drawDeckCount = getObjectFromGUID(string)
  local dealsPerPlayer = NUM_DEALS[numPlayers]
  local round1Count = 70 - numPlayers*dealsPerPlayer[1]
  local round2Count = round1Count - numPlayers*dealsPerPlayer[2]
  local round3Count = round2Count - numPlayers*dealsPerPlayer[3]
  if DEBUG then log('drawDeckCount=' .. drawDeckCount) end
  if drawDeckCount == 70 then
    return 0
  elseif drawDeckCount >= round1Count then
    return 1
  elseif drawDeckCount >= round2Count then
    return 2
  elseif drawDeckCount >= round3Count then
    return 3
  end
end

function getNextRound()
  local zone = getObjectFromGUID(guids.gameboardZone)
  local valueCounts = {
    ['10'] = 0,
    ['20'] = 0,
    ['30'] = 0
  }
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('valuetile') then
      if obj.hasTag('value10') then
        valueCounts['10'] = valueCounts['10'] + 1
      elseif obj.hasTag('value20') then
        valueCounts['20'] = valueCounts['20'] + 1
      elseif obj.hasTag('value30') then
        valueCounts['30'] = valueCounts['30'] + 1
      end
    end
  end
  local minValueCount = math.min(valueCounts['10'],valueCounts['20'],valueCounts['30'])
  local nextRound = minValueCount+1
  if DEBUG then log('nextRound=' .. nextRound) end
  return nextRound
end

function dealNextRound()
  local currentRound = getCurrentRound()
  local nextRound = getNextRound()
  if nextRound - currentRound == 1 then
    local deck = getObjectFromGUID(guids.drawDeck)
    local numPlayers = #getSeatedPlayers()
    deck.deal(NUM_DEALS[numPlayers][nextRound])
  end
end

function printBid(player_color)
  local bid = getPlayerBid(player_color)
  local msg = player_color .. ' bid $' .. bid .. 'k'
  local asRGB = stringColorToRGB(player_color)
  broadcastToAll(msg, asRGB)
end

function printBids()
  for _, player_color in ipairs(getSeatedPlayers()) do
    printBid(player_color)
  end
end


function onObjectRandomize(object, playerColor)
  if object.hasTag('Deck') then
    deck.shuffle()
    return
  end
  if not object.hasTag('moneytoken') then return end
  local position = object.getPosition()
  local rotation = object.getRotation()
  local value = getMoneyValue(object)
  local takeBank = nil
  local putBank = nil
  if object.hasTag('moneytoken') and object.getQuantity() == -1 then
    local numTake = 0
    if value == 1 then
      return
    elseif value == 5 then
      putBank = getObjectFromGUID(guids.bank5)
      takeBank = getObjectFromGUID(guids.bank1)
      numTake = 5
    elseif value == 10 then
      putBank = getObjectFromGUID(guids.bank10)
      takeBank = getObjectFromGUID(guids.bank5)
      numTake = 2
    elseif value == 20 then
      putBank = getObjectFromGUID(guids.bank20)
      takeBank = getObjectFromGUID(guids.bank10)
      numTake = 2
    elseif value == 50 then
      putBank = getObjectFromGUID(guids.bank50)
      takeBank = getObjectFromGUID(guids.bank10)
      numTake = 5
    elseif value == 100 then
      putBank = getObjectFromGUID(guids.bank100)
      takeBank = getObjectFromGUID(guids.bank50)
      numTake = 2
    end
    putBank.putObject(object)
    for i = 1, numTake do
      takeBank.takeObject({position=position,rotation=rotation})
    end
  -- stack of objects
  elseif object.getQuantity() > 0 and object.hasTag('moneytoken') then
    local takeValue = 0
    if value == 1 then
      putBank = getObjectFromGUID(guids.bank1)
      takeBank = getObjectFromGUID(guids.bank5)
      takeValue = 5
    elseif value == 5 then
      putBank = getObjectFromGUID(guids.bank5)
      takeBank = getObjectFromGUID(guids.bank10)
      takeValue = 10
    elseif value == 10 then
      putBank = getObjectFromGUID(guids.bank10)
      takeBank = getObjectFromGUID(guids.bank20)
      takeValue = 20
    elseif value == 20 then
      putBank = getObjectFromGUID(guids.bank20)
      takeBank = getObjectFromGUID(guids.bank100)
      takeValue = 100
    elseif value == 50 then
      putBank = getObjectFromGUID(guids.bank50)
      takeBank = getObjectFromGUID(guids.bank100)
      takeValue = 100
    elseif value == 100 then
      return
    end
    while object.getQuantity()*value >= takeValue do
      takeBank.takeObject({position=position,rotation=rotation})
      for i = 1, takeValue/value do
        putBank.putObject(object.takeObject())
      end
    end
  end
end

function onObjectLeaveContainer(container, leave_object)
  if leave_object.hasTag('Painting') then
    function announceAuction(player_color)
      broadcastToAll(player_color..' is holding '..getAuctionType(leave_object)
      .. ' for a painting by '..getArtist(leave_object), stringColorToRGB(player_color))
      local easel = getObjectFromGUID(guids.easels[player_color])
      local snapPoint = easel.getSnapPoints()[1]
      local position = easel.getPosition() + snapPoint.position + Vector(0,6,0)
      local rotation = easel.getRotation()  + Vector(90,0,90)
      leave_object.setRotationSmooth(rotation)
      leave_object.setPositionSmooth(position)
    end
    leave_object.addContextMenuItem("Auction", announceAuction)
  end
end


function onLoad()
  local drawZone = getObjectFromGUID(guids.drawZone)
  drawZone.createButton({
      click_function = 'dealNextRound',
      label          = 'Deal',
      position       = Vector(0,-0.45,.7),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Deal next round if ready.'
    })
  local discardZone = getObjectFromGUID(guids.discardZone)
  discardZone.createButton({
      click_function = 'collectDiscards',
      label          = 'Cleanup',
      position       = Vector(0, -0.45,0.7),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Cleanup sold paintings'
    })
  local gameboard = getObjectFromGUID(guids.gameboard)
  gameboard.createButton({
        click_function = 'printBids',
        label          = 'Print ALL Bids',
        position       = Vector(0, 0, 1.2),
        width          = 800,
        height         = 80,
        font_size      = 100,
        tooltip        = 'Display everyone\'s current bid in chat'
  })

  for player_color, zone in pairs(guids.hiddenZones) do
    local buttonCallbackName = 'print'..player_color..'Bid'
    -- Store in global namespace
	  _G[buttonCallbackName] = function(obj, color, alt) printBid(player_color) end
    local z = getObjectFromGUID(zone)
    z.createButton({
          click_function = buttonCallbackName,
          label          = 'Print ' .. player_color .. ' Bid',
          position       = Vector(0, -0.07, 0.64),
          width          = 500,
          height         = 20,
          font_size      = 50,
          color          = player_color,
          tooltip        = 'Print ' .. player_color .. '\'s current bid in chat'
    })
  end

end
