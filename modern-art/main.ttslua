DEBUG=true
POSITION = {
  ['drawPile'] = {17.00, 3.48, -23.00},
  ['discardPile'] = {-25.00, 3.82, -23.00},
  ['valueTileStack10'] = {-17.00, 3.51, -31.00},
  ['valueTileStack20'] = {-17.00, 3.51, -29.00},
  ['valueTileStack30'] = {-17.00, 3.51, -27.00},
}
GUID = {
  ['menu'] = 'ba89e8',
  ['gameboard'] = '967cd1',
  ['drawZone'] = '4e6002',
  ['discardZone'] = 'ef22a1',
  ['bank1'] = '94a867',
  ['bank5'] = 'c67c1e',
  ['bank10'] = '530368',
  ['bank20'] = 'bfa084',
  ['bank50'] = '5dbeda',
  ['bank100'] = '84647e',
  ['hiddenZones'] = {
    ['Red'] = '7829a3',
    ['Yellow'] = 'e166c2',
    ['Green'] = '753dcc',
    ['Blue'] = '07fa6f',
    ['Pink'] = '528154'
  }
}

NUM_DEALS = {
  [1] = {
    [1] = 10,
    [2] = 6,
    [3] = 6,
    [4] = 0 }, -- for debug
  [3] = {
    [1] = 10,
    [2] = 6,
    [3] = 6,
    [4] = 0 },
  [4] = {
    [1] = 9,
    [2] = 4,
    [3] = 4,
    [4] = 0 },
  [5] = {
    [1] = 8,
    [2] = 3,
    [3] = 3,
    [4] = 0 }
}

VECTOR_ZERO = Vector(0,0,0)

function getHiddenZone(player_color)
  return getObjectFromGUID(GUID['hiddenZones'][player_color])
end

-- https://www.reddit.com/r/tabletopsimulator/comments/c0c3qf/help_drawing_a_card_from_a_deck_inside_a/
function findDeck(script_zone_guid)
    --First, use getObjects to get a list of anything in that zone
    local objectsInZone = getObjectFromGUID(script_zone_guid).getObjects()
    --Then we search through each entry in that table
    for i, v in pairs(objectsInZone) do
        --Tag gives us a nice definition of an item. In this case, "Deck"
        if v.tag == 'Deck' then
            foundDeck = v
        end
    end
    --If we found a deck, this function returns foundDeck
    --If not, it returns nil and prints and error
    if foundDeck then
        return foundDeck
    else
        printToAll("No deck found in scripting zone.", {1,1,1})
        return nil
    end
end

function getDrawDeckCount()
  local drawDeck = findDeck(GUID.drawZone)
  if drawDeck then
    return drawDeck.getQuantity()
  else
    return 0
  end
end

function cleanupMoneyTokens()
  for _, token in ipairs(getObjectsWithTag('moneytoken')) do
    token.destruct()
  end
end

function resetValueTileStacks()
  local stack10 = group(getObjectsWithAllTags({'valuetile','value10'}))[1]
  stack10.setRotationSmooth(VECTOR_ZERO)
  stack10.setPositionSmooth(POSITION.valueTileStack10)
  local stack20 = group(getObjectsWithAllTags({'valuetile','value20'}))[1]
  stack20.setRotationSmooth(VECTOR_ZERO)
  stack20.setPositionSmooth(POSITION.valueTileStack20)
  local stack30 = group(getObjectsWithAllTags({'valuetile','value30'}))[1]
  stack30.setRotationSmooth(VECTOR_ZERO)
  stack30.setPositionSmooth(POSITION.valueTileStack30)
end

function resetDrawPile()
  local paintings = getObjectsWithTag('painting')
  for _, painting in ipairs(paintings) do
    painting.setRotationSmooth(Vector(0,0,180))
    painting.setPositionSmooth(POSITION.drawPile)
  end
  local deck = group(paintings)[1]
  deck.shuffle()
end

function collectDiscards()
  local paintings = getObjectsWithTag('painting')
  for _, painting in ipairs(paintings) do
    if (not painting.is_face_down) and (painting.getPosition()[2] < 4 ) then
      painting.setRotationSmooth(Vector(0,0,0))
      painting.setPositionSmooth(POSITION.discardPile)
    end
  end
end


function resetGame()
  resetDrawPile()
  resetValueTileStacks()
  cleanupMoneyTokens()
end

-- Use deck size to get current round
function getCurrentRound()
  local numPlayers = #getSeatedPlayers()
  local drawDeckCount = getDrawDeckCount()
  local dealsPerPlayer = NUM_DEALS[numPlayers]
  local round1Count = 70 - numPlayers*dealsPerPlayer[1]
  local round2Count = round1Count - numPlayers*dealsPerPlayer[2]
  local round3Count = round2Count - numPlayers*dealsPerPlayer[3]
  if DEBUG then log('drawDeckCount=' .. drawDeckCount) end
  if drawDeckCount == 70 then
    return 0
  elseif drawDeckCount >= round1Count then
    return 1
  elseif drawDeckCount >= round2Count then
    return 2
  elseif drawDeckCount >= round3Count then
    return 3
  end
end

function getNextRound()
  local zone = getObjectFromGUID(GUID.gameboard)
  local valueCounts = {
    ['10'] = 0,
    ['20'] = 0,
    ['30'] = 0
  }
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('valuetile') then
      if obj.hasTag('value10') then
        valueCounts['10'] = valueCounts['10'] + 1
      elseif obj.hasTag('value20') then
        valueCounts['20'] = valueCounts['20'] + 1
      elseif obj.hasTag('value30') then
        valueCounts['30'] = valueCounts['30'] + 1
      end
    end
  end
  local minValueCount = math.min(valueCounts['10'],valueCounts['20'],valueCounts['30'])
  local nextRound = minValueCount+1
  if DEBUG then log('nextRound=' .. nextRound) end
  return nextRound
end

function dealNextRound()
  local currentRound = getCurrentRound()
  local nextRound = getNextRound()
  -- Deal money
  if currentRound == 0 then
    for _, player_color in ipairs(getSeatedPlayers()) do
      local hiddenZonePos = getHiddenZone(player_color).getPosition()
      print(hiddenZonePos)
      for i = 1,5 do getObjectFromGUID(GUID.bank1).takeObject({position=hiddenZonePos}) end
      for i = 1,1 do getObjectFromGUID(GUID.bank5).takeObject({position=hiddenZonePos}) end
      for i = 1,2 do getObjectFromGUID(GUID.bank10).takeObject({position=hiddenZonePos}) end
      for i = 1,1 do getObjectFromGUID(GUID.bank20).takeObject({position=hiddenZonePos}) end
      for i = 1,1 do getObjectFromGUID(GUID.bank50).takeObject({position=hiddenZonePos}) end
    end

  end
  if nextRound - currentRound == 1 then
    local deck = findDeck(GUID.drawZone)
    local numPlayers = #getSeatedPlayers()
    deck.deal(NUM_DEALS[numPlayers][nextRound])
  end
end

function createDebugMenu()
  local menu = getObjectFromGUID(GUID.menu)
  local center_offset = -0.7
  menu.createButton({
    click_function = 'resetGame',
    label          = 'resetGame',
    position       = Vector(center_offset,0.1,-1.2),
    width          = 700,
    height         = 200,
    font_size      = 120,
    tooltip        = 'Reset and create a new game',
  })
  menu.createButton({
    click_function = 'collectDiscards',
    label          = 'collectDiscards',
    position       = Vector(center_offset,0.1,-0.8),
    width          = 800,
    height         = 200,
    font_size      = 120,
    tooltip        = 'Collect discards and place in pile',
  })
  menu.createButton({
    click_function = 'getCurrentRound',
    label          = 'getCurrentRound',
    position       = Vector(center_offset,0.1,-0.0),
    width          = 800,
    height         = 200,
    font_size      = 120,
    tooltip        = 'Get current round number',
  })
end

function getMoneyValue(moneytoken)
  if moneytoken.hasTag("value1") then return 1
  elseif moneytoken.hasTag("value5") then return 5
  elseif moneytoken.hasTag("value10") then return 10
  elseif moneytoken.hasTag("value20") then return 20
  elseif moneytoken.hasTag("value50") then return 50
  elseif moneytoken.hasTag("value100") then return 100
  else return 0 end
end

function onObjectNumberTyped( object,  player_color,  number)
  if object.hasTag('moneytoken') then
    local position = object.getPosition()
    local value = getMoneyValue(object)
    object.destruct()
    local bank = nil
    local numTake = 0
    if value == 5 then
      bank = getObjectFromGUID(GUID.bank1)
      numTake = 5
    elseif value == 10 then
      bank = getObjectFromGUID(GUID.bank5)
      numTake = 2
    elseif value == 20 then
      bank = getObjectFromGUID(GUID.bank10)
      numTake = 2
    elseif value == 50 then
      bank = getObjectFromGUID(GUID.bank10)
      numTake = 5
    elseif value == 100 then
      bank = getObjectFromGUID(GUID.bank50)
      numTake = 2
    end
    for i = 1, numTake do
      bank.takeObject({position=position})
    end
  end
end

function onLoad()

  if DEBUG then
    createDebugMenu()
  end

  --addHotkey("Smart Change", deal_to_players)

  local drawZone = getObjectFromGUID(GUID.drawZone)
  drawZone.createButton({
      click_function = 'dealNextRound',
      label          = 'Deal',
      position       = Vector(.7,-0.45,0),
      rotation       = Vector(0,270,0),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Deal next round if ready.'
    })
  local discardZone = getObjectFromGUID(GUID.discardZone)
  discardZone.createButton({
      click_function = 'collectDiscards',
      label          = 'Cleanup',
      position       = Vector(-0.05, -0.45,-0.7),
      rotation       = Vector(0,180,0),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Cleanup sold paintings'
    })
end
