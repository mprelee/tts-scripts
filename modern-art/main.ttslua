constants = require('modern-art/constants')

function getMoneyValue(moneytoken)
  if moneytoken.hasTag("value1") then return 1
  elseif moneytoken.hasTag("value5") then return 5
  elseif moneytoken.hasTag("value10") then return 10
  elseif moneytoken.hasTag("value20") then return 20
  elseif moneytoken.hasTag("value50") then return 50
  elseif moneytoken.hasTag("value100") then return 100
  else return 0 end
end

function sumCashInZone(zone_guid, ythresh)
  local ythresh = ythresh or -9999
  local zone = getObjectFromGUID(zone_guid)
  local total = 0
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('moneytoken') and obj.getPosition()[2] > ythresh then
      total = total + math.abs(obj.getQuantity())*getMoneyValue(obj)
    end
  end
  return total
end

function getPlayerBid(player_color)
    local zone_guid = GUID.hiddenZones[player_color]
    return sumCashInZone(zone_guid,0.7)
end


function getDrawDeckCount()
  local drawDeck = getObjectFromGUID(GUID.drawDeck)
  if drawDeck then return drawDeck.getQuantity()
  else return 0 end
end

function collectDiscards()
  local paintings = getObjectsWithTag('painting')
  local discardPos = getObjectFromGUID(GUID.discardZone).getPosition()
  for _, painting in ipairs(paintings) do
    if (not painting.is_face_down) and (painting.getPosition()[2] < 2 ) then
      painting.setRotationSmooth(Vector(0,0,0))
      painting.setPositionSmooth(discardPos)
    end
  end
end

-- Use deck size to get current round
function getCurrentRound()
  local numPlayers = #getSeatedPlayers()
  local drawDeckCount = getDrawDeckCount()
  local dealsPerPlayer = NUM_DEALS[numPlayers]
  local round1Count = 70 - numPlayers*dealsPerPlayer[1]
  local round2Count = round1Count - numPlayers*dealsPerPlayer[2]
  local round3Count = round2Count - numPlayers*dealsPerPlayer[3]
  if DEBUG then log('drawDeckCount=' .. drawDeckCount) end
  if drawDeckCount == 70 then
    return 0
  elseif drawDeckCount >= round1Count then
    return 1
  elseif drawDeckCount >= round2Count then
    return 2
  elseif drawDeckCount >= round3Count then
    return 3
  end
end

function getNextRound()
  local zone = getObjectFromGUID(GUID.gameboardZone)
  local valueCounts = {
    ['10'] = 0,
    ['20'] = 0,
    ['30'] = 0
  }
  for _, obj in ipairs(zone.getObjects()) do
    if obj.hasTag('valuetile') then
      if obj.hasTag('value10') then
        valueCounts['10'] = valueCounts['10'] + 1
      elseif obj.hasTag('value20') then
        valueCounts['20'] = valueCounts['20'] + 1
      elseif obj.hasTag('value30') then
        valueCounts['30'] = valueCounts['30'] + 1
      end
    end
  end
  local minValueCount = math.min(valueCounts['10'],valueCounts['20'],valueCounts['30'])
  local nextRound = minValueCount+1
  if DEBUG then log('nextRound=' .. nextRound) end
  return nextRound
end

function dealNextRound()
  local currentRound = getCurrentRound()
  local nextRound = getNextRound()
  if nextRound - currentRound == 1 then
    local deck = getObjectFromGUID(GUID.drawDeck)
    local numPlayers = #getSeatedPlayers()
    deck.deal(NUM_DEALS[numPlayers][nextRound])
  end
end

function printBids()
  for _, player_color in ipairs(getSeatedPlayers()) do
    local bid = getPlayerBid(player_color)
    printToAll(player_color .. ' bid $' .. bid, stringColorToRGB(player_color))
  end
end

function getMoneyValue(moneytoken)
  if moneytoken.hasTag("value1") then return 1
  elseif moneytoken.hasTag("value5") then return 5
  elseif moneytoken.hasTag("value10") then return 10
  elseif moneytoken.hasTag("value20") then return 20
  elseif moneytoken.hasTag("value50") then return 50
  elseif moneytoken.hasTag("value100") then return 100
  else return 0 end
end

function onObjectRandomize(object, playerColor)
  log(type(object))
  log(object.getQuantity())
  log(object.getTags())
  local position = object.getPosition()
  local value = getMoneyValue(object)
  local takeBank = nil
  local putBank = nil
  if object.hasTag('moneytoken') and object.getQuantity() == -1 then
    log('single token')
    local numTake = 0
    if value == 1 then
      return
    elseif value == 5 then
      putBank = getObjectFromGUID(GUID.bank5)
      takeBank = getObjectFromGUID(GUID.bank1)
      numTake = 5
    elseif value == 10 then
      putBank = getObjectFromGUID(GUID.bank10)
      takeBank = getObjectFromGUID(GUID.bank5)
      numTake = 2
    elseif value == 20 then
      putBank = getObjectFromGUID(GUID.bank20)
      takeBank = getObjectFromGUID(GUID.bank10)
      numTake = 2
    elseif value == 50 then
      putBank = getObjectFromGUID(GUID.bank50)
      takeBank = getObjectFromGUID(GUID.bank10)
      numTake = 5
    elseif value == 100 then
      putBank = getObjectFromGUID(GUID.bank100)
      takeBank = getObjectFromGUID(GUID.bank50)
      numTake = 2
    end
    putBank.putObject(object)
    for i = 1, numTake do
      takeBank.takeObject({position=position})
    end
  -- stack of objects
  elseif object.getQuantity() > 0 and object.hasTag('moneytoken') then
    log('multiple tokens')
    local takeValue = 0
    if value == 1 then
      putBank = getObjectFromGUID(GUID.bank1)
      takeBank = getObjectFromGUID(GUID.bank5)
      takeValue = 5
    elseif value == 5 then
      putBank = getObjectFromGUID(GUID.bank5)
      takeBank = getObjectFromGUID(GUID.bank10)
      takeValue = 10
    elseif value == 10 then
      putBank = getObjectFromGUID(GUID.bank10)
      takeBank = getObjectFromGUID(GUID.bank20)
      takeValue = 20
    elseif value == 20 then
      putBank = getObjectFromGUID(GUID.bank20)
      takeBank = getObjectFromGUID(GUID.bank100)
      takeValue = 100
    elseif value == 50 then
      putBank = getObjectFromGUID(GUID.bank50)
      takeBank = getObjectFromGUID(GUID.bank100)
      takeValue = 100
    elseif value == 100 then
      return
    end
    log('here')
    while object.getQuantity()*value >= takeValue do
      log('here')
      for i = 1, takeValue/value do
        putBank.putObject(object.takeObject())
      end
      takeBank.takeObject({position=position})
    end
  end
end


function onLoad()
  local drawZone = getObjectFromGUID(GUID.drawZone)
  drawZone.createButton({
      click_function = 'dealNextRound',
      label          = 'Deal',
      position       = Vector(0,-0.45,.7),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Deal next round if ready.'
    })
  local discardZone = getObjectFromGUID(GUID.discardZone)
  discardZone.createButton({
      click_function = 'collectDiscards',
      label          = 'Cleanup',
      position       = Vector(0, -0.45,0.7),
      width          = 400,
      height         = 80,
      font_size      = 100,
      tooltip        = 'Cleanup sold paintings'
    })
  local gameboard = getObjectFromGUID(GUID.gameboard)
  gameboard.createButton({
        click_function = 'printBids',
        label          = 'Print Bids',
        position       = Vector(0, 0, 1.2),
        width          = 800,
        height         = 80,
        font_size      = 100,
        tooltip        = 'Cleanup sold paintings'
      })


  --for _, player_color in ipairs(getSeatedPlayers()) do
  --  local zone_guid = GUID.hiddenZones[player_color]
  --  local total = sumCashInZone(zone_guid)
  --  print(player_color .. ' has $' .. total)
  --  print(player_color .. ' bids $' .. getPlayerBid(player_color))
  --end
end
